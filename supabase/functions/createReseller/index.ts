import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2"; // Corrected import

// Define a generic CORS header object for reuse
const CORS_HEADERS = {
  "Access-Control-Allow-Origin": "*", // Allow all origins for development
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

serve(async (req) => {
  console.log("Deno Function: createReseller - Invoked!");
  console.log(`Request Method: ${req.method}`);
  console.log(`Request URL: ${req.url}`);

  if (req.method === "OPTIONS") {
    console.log("Deno Function: Handling OPTIONS preflight.");
    return new Response("OK", {
      status: 200,
      headers: CORS_HEADERS,
    });
  }

  try {
    const body = await req.json();
    const { name, email, phone, region, coverage } = body; // Keep destructuring for logs
    console.log("Deno Function: Request body parsed:", { name, email, phone, region, coverage });

    if (!name || typeof name !== 'string' || name.trim() === '') {
      console.warn("Deno Function: Validation failed - 'name' is missing or invalid.");
      return new Response(JSON.stringify({ error: "Missing or invalid 'name' field. Name is required." }), {
        status: 400,
        headers: {
          "Content-Type": "application/json",
          ...CORS_HEADERS
        },
      });
    }

    const projectUrlEnv = Deno.env.get("PROJECT_URL");
    const serviceRoleKeyEnv = Deno.env.get("SERVICE_ROLE_KEY");

    console.log(`Deno Function: PROJECT_URL present: ${!!projectUrlEnv}`);
    console.log(`Deno Function: SERVICE_ROLE_KEY present: ${!!serviceRoleKeyEnv}`);

    if (!projectUrlEnv || !serviceRoleKeyEnv) {
      console.error("Deno Function: CRITICAL - Missing environment variables!");
      return new Response(JSON.stringify({
        error: "Server configuration error: Missing environment variables.",
        details: {
          PROJECT_URL_present: !!projectUrlEnv,
          SERVICE_ROLE_KEY_present: !!serviceRoleKeyEnv,
        }
      }), {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          ...CORS_HEADERS
        },
      });
    }

    const supabase = createClient(projectUrlEnv, serviceRoleKeyEnv);
    console.log("Deno Function: Supabase client initialized.");

    // --- Prepare Auth User Data ---
    const uniqueSuffix = crypto.randomUUID().replace(/-/g, '').substring(0, 8);
    const authUserEmail = (email && typeof email === 'string' && email.trim() !== '')
                          ? email.trim()
                          : `${name.toLowerCase().replace(/\s/g, '.')}.${uniqueSuffix}@autogen.yourdomain.com`;

    const cleanedNameForPass = name.trim().replace(/\s+/g, '').toLowerCase();
    const generatedPassword = `${cleanedNameForPass.charAt(0).toUpperCase()}${cleanedNameForPass.slice(1)}@123`;

    console.log(`Deno Function: Final Auth Email: ${authUserEmail}`);
    console.log(`Deno Function: Generated Password (for Auth): ${generatedPassword}`); // Be careful with this log in production

    // --- MODIFICATION: ONLY perform supabase.auth.admin.createUser ---
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: authUserEmail,
      password: generatedPassword,
      email_confirm: true, // Auto-confirm for admin-added users
      options: {
        data: {
          original_name: name.trim(),
          is_autogenerated_email: !(email && typeof email === 'string' && email.trim() !== ''),
          original_email: (email && typeof email === 'string' && email.trim() !== '') ? email.trim() : null,
          original_phone: (phone && typeof phone === 'string' && phone.trim() !== '') ? phone.trim() : null,
          original_region: (region && typeof region === 'string' && region.trim() !== '') ? region.trim() : null,
        }
      }
    });

    if (authError) {
      console.error("Deno Function: Supabase Auth user creation error:", authError);
      return new Response(JSON.stringify({ error: authError.message || "Failed to create authentication user." }), {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          ...CORS_HEADERS
        },
      });
    }
    const userId = authUser.user.id;
    console.log(`Deno Function: Auth user created with ID: ${userId}`);

    // --- REMOVED: public.users table insertion logic ---
    // This part is commented out for this diagnostic test.
    /*
    const { error: insertError } = await supabase.from("users").insert([
      {
        id: userId,
        email: (email && typeof email === 'string' && email.trim() !== '') ? email.trim() : null,
        name: name.trim(),
        region: (region && typeof region === 'string' && region.trim() !== '') ? region.trim() : null,
        role: "reseller",
        is_active: true,
        contact_info: (phone && typeof phone === 'string' && phone.trim() !== '') ? { phone: phone.trim() } : null,
        flagged_status: false,
        exclusive_features: "",
        coverage: coverage || 0,
        total_products_sold: 0,
        total_revenue_generated: 0.00,
        payment_amount_remaining: 0.00,
        reward_points: 0.00,
      },
    ]);

    if (insertError) {
      console.error("Deno Function: Database insert error into 'users' table:", insertError);
      const { error: deleteAuthError } = await supabase.auth.admin.deleteUser(userId);
      if (deleteAuthError) {
        console.error("Deno Function: Failed to delete auth user after 'users' table insert failure:", deleteAuthError);
      }
      return new Response(JSON.stringify({ error: insertError.message || "Failed to add reseller to database." }), {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          ...CORS_HEADERS
        },
      });
    }
    console.log("Deno Function: User profile insertion skipped for this test.");
    */

    // --- Return success response after ONLY Auth user creation ---
    return new Response(JSON.stringify({
      success: true,
      message: "Auth user created successfully! (Profile insertion skipped for test)",
      userId: userId, // Return the Auth user ID
      generated_password: generatedPassword
    }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...CORS_HEADERS
      },
    });

  } catch (err: any) {
    console.error("Deno Function: Unexpected Error (caught in main try-catch):", err.message, err.stack);
    return new Response(JSON.stringify({
      error: "Internal Server Error",
      detail: err.message,
      stack: err.stack
    }), {
      status: 500,
      headers: {
        "Content-Type": "application/json",
        ...CORS_HEADERS
      },
    });
  }
});